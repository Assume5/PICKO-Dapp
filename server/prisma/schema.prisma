generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model test {
  id      Int     @id @default(autoincrement())
  fname   String
  lname   String
}

model socket_session {
  socket_id String @id
  socket_cookie String
}

model guest {
  cookie_value String @id 
  carts guest_cart[]
  create_at DateTime @default(now())
}

model guest_cart {
  id Int @id @default(autoincrement())
  own_by guest @relation(fields: [guest_cooke_value], references: [cookie_value])
  guest_cooke_value String
  menu_id Int
  price Float
  count Int
}

model customer {
  id String  @id @default(uuid())
  username String @unique
  password String
  first_name String
  last_name String
  phone String
  metamask_address String?
  carts cart[]
  orders order[]
  created_at DateTime @default(now())
}

model cart {
  id Int @id @default(autoincrement())
  customer customer @relation(fields: [customer_id], references: [id])
  customer_id String
  menu_id Int
  menu_name String
  price Float
  count Int
}


model driver {
  id String  @id @default(uuid())
  username String @unique
  password String
  first_name String
  last_name String
  address String
  driver_license String
  phone String
  metamask_address String?
  lat String
  long String
  status String
  orders order[]
  created_at DateTime @default(now())
}

model owner {
  id String @id @default(uuid())
  username String @unique
  password String
  first_name String
  last_name String
  phone String
  metamask_address String?
  created_at DateTime @default(now())
  restaurants restaurant[]
}

model restaurant {
  id String @id @default(uuid())
  owner owner @relation(fields: [owner_id], references: [id])
  owner_id String
  restaurant_name String
  full_address String
  address String
  city String
  state String
  zipcode String
  phone String
  category String
  lat String
  long String
  open_time String
  close_time String
  menu_type  String @default("filter")
  hero_type String @default("image")
  restaurant_card_image String
  view_count Int @default(0)
  order_count Int @default(0)
  status String @default("close")
  menus menus[]
  menu_category menu_category[]
  hero_images restaurant_hero[]
  social_links restaurant_social?
  orders order[]
  create_at DateTime @default(now())
}

model menus {
  id Int @id @default(autoincrement())
  menu_name String
  restaurant restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String
  price Float
  description String
  image String
  menu_category menu_category @relation(fields: [category], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Int
  status String
}

model menu_category {
    id Int @id @default(autoincrement())
    category_name String
    restaurant restaurant @relation(fields: [restaurant_id], references: [id] )
    restaurant_id String
    priority Boolean
    menus menus[]
    image String?
}

model restaurant_hero {
  id Int @id @default(autoincrement())
  hero_image String
  restaurant restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurant_id String
}

model restaurant_social {
  id Int @id @default(autoincrement())
  restaurant restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String
  twitter_url String
  facebook_url String
  instagram_url String
}

model order {
  id String @id
  customer customer @relation(fields: [customer_id], references: [id])
  customer_id String
  restaurant restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String
  driver driver? @relation(fields: [driver_id], references: [id])
  driver_id String
  order_date DateTime @default(now())
  deliver_fee Float
  driver_tip Float
  total_items Int
  status String
  sub_total Float
  details order_details[]
}

model order_details {
  id Int @id @default(autoincrement())
  order order @relation(fields: [order_id], references: [id])
  order_id String
  menu_id Int
  count Int
}