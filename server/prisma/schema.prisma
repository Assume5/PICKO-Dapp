generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  authorId  Int?
  author    User?    @relation(fields: [authorId], references: [id])
}

model test {
  id    Int    @id @default(autoincrement())
  fname String
  lname String
}

model socket_session {
  socket_id     String @id
  socket_cookie String
}

model guest {
  cookie_value String       @id
  create_at    DateTime     @default(now())
  carts        guest_cart[]
}

model guest_cart {
  id            Int    @id @default(autoincrement())
  menu_id       Int
  price         Float
  count         Int
  restaurant_id String
  menu_name     String
  customer_id   String
  own_by        guest  @relation(fields: [customer_id], references: [cookie_value], onDelete: Cascade)
}

model customer {
  id               String   @id @default(uuid())
  username         String   @unique
  password         String
  first_name       String
  last_name        String
  phone            String
  metamask_address String?
  created_at       DateTime @default(now())
  socket_cookie    String   @default(uuid())
  carts            cart[]
  orders           order[]
}

model cart {
  id            Int      @id @default(autoincrement())
  customer_id   String
  menu_id       Int
  price         Float
  count         Int
  menu_name     String
  restaurant_id String
  customer      customer @relation(fields: [customer_id], references: [id])
}

model driver {
  id               String   @id @default(uuid())
  username         String   @unique
  password         String
  first_name       String
  last_name        String
  address          String
  driver_license   String
  phone            String
  metamask_address String?
  lat              String
  long             String
  status           String
  created_at       DateTime @default(now())
  socket_cookie    String   @default(uuid())
  orders           order[]
}

model owner {
  id               String       @id @default(uuid())
  username         String       @unique
  password         String
  first_name       String
  last_name        String
  phone            String
  metamask_address String?
  created_at       DateTime     @default(now())
  socket_cookie    String       @default(uuid())
  restaurants      restaurant[]
}

model restaurant {
  id                    String             @id @default(uuid())
  owner_id              String
  restaurant_name       String
  address               String
  phone                 String
  category              String
  lat                   String
  long                  String
  menu_type             String             @default("filter")
  hero_type             String             @default("image")
  restaurant_card_image String
  open_time             String
  view_count            Int                @default(0)
  order_count           Int                @default(0)
  status                String             @default("close")
  create_at             DateTime           @default(now())
  city                  String
  close_time            String
  full_address          String
  state                 String
  zipcode               String
  owner                 owner              @relation(fields: [owner_id], references: [id])
  menu_category         menu_category[]
  menus                 menus[]
  orders                order[]
  hero_images           restaurant_hero[]
  social_links          restaurant_social?
}

model menus {
  id            Int           @id @default(autoincrement())
  menu_name     String
  restaurant_id String
  price         Float
  description   String
  category      Int
  status        String
  image         String
  menu_category menu_category @relation(fields: [category], references: [id], onDelete: Cascade)
  restaurant    restaurant    @relation(fields: [restaurant_id], references: [id])
}

model menu_category {
  id            Int        @id @default(autoincrement())
  category_name String
  restaurant_id String
  priority      Boolean
  image         String?
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id])
  menus         menus[]
}

model restaurant_hero {
  id            Int        @id @default(autoincrement())
  restaurant_id String
  hero_image    String
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
}

model restaurant_social {
  id            Int        @id @default(autoincrement())
  restaurant_id String     @unique
  twitter_url   String
  facebook_url  String
  instagram_url String
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id])
}

model order {
  id            String          @id
  customer_id   String
  restaurant_id String
  driver_id     String
  order_date    DateTime        @default(now())
  deliver_fee   Float
  driver_tip    Float
  total_items   Int
  status        String
  sub_total     Float
  customer      customer        @relation(fields: [customer_id], references: [id])
  driver        driver          @relation(fields: [driver_id], references: [id])
  restaurant    restaurant      @relation(fields: [restaurant_id], references: [id])
  details       order_details[]
}

model order_details {
  id       Int    @id @default(autoincrement())
  order_id String
  menu_id  Int
  count    Int
  order    order  @relation(fields: [order_id], references: [id])
}
